"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcGlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJU2ltcGxpZmllZE5vZGUsIElMYW5kIH0gZnJvbSAnLidcbmltcG9ydCB7IERpZmZQYWNrZXQgfSBmcm9tICcuL2ludGVybmFsL3R5cGVzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VEaWN0IHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIFVzZXJEYXRhID0ge1xuICBkaXNwbGF5TmFtZTogc3RyaW5nXG4gIHB1YmxpY0tleTogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyY2VsSWRlbnRpdHkge1xuICBnZXRQYXJjZWwoKTogUHJvbWlzZTx7IHg6IG51bWJlcjsgeTogbnVtYmVyOyBsYW5kOiBJTGFuZCB9PlxufVxuXG5leHBvcnQgdHlwZSBSUENTZW5kYWJsZU1lc3NhZ2UgPSB7XG4gIGpzb25ycGM6ICcyLjAnXG4gIGlkOiBudW1iZXJcbiAgbWV0aG9kOiBzdHJpbmdcbiAgcGFyYW1zOiBhbnlbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eUNvbnRyb2xsZXIge1xuICAvKipcbiAgICogT3ZlcndyaXRlcyB0aGUgc2NlbmUgYnkgcmVuZGVyaW5nIHByb3ZpZGVkIE5vZGVcbiAgICogQHBhcmFtIGVsZW1lbnRcbiAgICovXG4gIHJlbmRlcihlbGVtZW50OiBJU2ltcGxpZmllZE5vZGUgfCBEaWZmUGFja2V0KTogUHJvbWlzZTx2b2lkPlxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIHRvIGV2ZW50cyBkaXNwYXRjaGVkIGJ5IHRoZSBFbnRpdHlDb250cm9sbGVyXG4gICAqIFVzZSBpdCB0byBsaXN0ZW4gdG8gZXZlbnRzIGZyb20gdGhlIHNjZW5lIChsaWtlIGBjbGlja2ApXG4gICAqIEBwYXJhbSBldmVudFxuICAgKi9cbiAgc3Vic2NyaWJlKGV2ZW50OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBzdWJzY3JpcHRpb24gdG8gYW4gZXZlbnRcbiAgICogQHBhcmFtIGV2ZW50XG4gICAqL1xuICB1bnN1YnNjcmliZShldmVudDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPlxuXG4gIC8qKlxuICAgKiBQYXNzZXMgYXR0cmlidXRlcyB0byB0aGUgY29tcG9uZW50cyBvZiBhbiBzcGVjaWZpYyBlbnRpdHlcbiAgICpcbiAgICogVmFsdWVzIG11c3QgYmUgc3BlY2lmaWVkIGluIHRoZSBzYW1lIHdheSBhcyBpbiB0aGUgRXN0YXRlIGRlZmluaXRpb24gc3ludGF4XG4gICAqXG4gICAqIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiBgYGBcbiAgICoge1xuICAgKiAgIHBvc2l0aW9uOiB7eDogMCwgeTowLCB6OjB9LFxuICAgKiAgIHNvdW5kOiB7c3JjOiBcInNvdW5kcy9jYXJuaXZhbHJpZGVzLm9nZ1wiLCBhdXRvcGxheTogdHJ1ZSB9XG4gICAqICAgLy8gZXRjLi4uXG4gICAqIH1cbiAgICogYGBgXG4gICAqIEBwYXJhbSBlbnRpdHlJZCBUaGUgdmFsdWUgc3BlY2lmaWVkIGluIHRoZSBgaWRgIGF0dHJpYnV0ZSBvZiB0aGUgZW50aXR5XG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVzIEFuIG9iamVjdCBjb250YWluaW5nIGF0dHJpYnV0ZXMgYW5kIHRoZWlyIHZhbHVlcyBhcyBzdHJpbmdzXG4gICAqL1xuICBzZXRFbnRpdHlBdHRyaWJ1dGVzKGVudGl0eUlkOiBzdHJpbmcsIGF0dHJpYnV0ZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBQcm9taXNlPHZvaWQ+XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIGZvciBhbiBlc3BlY2lmaWMgYXR0cmlidXRlIG9mIGFuIGVudHJpdHlcbiAgICogQHBhcmFtIGVudGl0eUlkIFRoZSB2YWx1ZSBzcGVjaWZpZWQgaW4gdGhlIGBpZGAgYXR0cmlidXRlIG9mIHRoZSBlbnRpdHlcbiAgICogQHBhcmFtIGF0dHJpYnV0ZSBUaGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlLCBmb3IgZXhhbXBsZTogYHBvc2l0aW9uYFxuICAgKi9cbiAgZ2V0RW50aXR5QXR0cmlidXRlKGVudGl0eUlkOiBzdHJpbmcsIGF0dHJpYnV0ZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGF0dHJpYnV0ZXMgZm9yIHRoaXMgc2NyaXB0XG4gICAqXG4gICAqIFVzZWZ1bCB3aGVuIHJldHJpZXZpbmcgYXR0cmlidXRlcyBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIGBzY3JpcHRgIGVudGl0eVxuICAgKi9cbiAgZ2V0T3duQXR0cmlidXRlcygpOiBQcm9taXNlPHsgW2tleTogc3RyaW5nXTogYW55IH0+XG5cbiAgLyoqIEV2ZW50IGhhbmRsZXIgZm9yIHN1YnNjcmlwdGlvbiBldmVudHMgKi9cbiAgb25TdWJzY3JpYmVkRXZlbnQoZm46IGFueSk6IHZvaWRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFdGhlcmV1bUNvbnRyb2xsZXIge1xuICAvKipcbiAgICogVXNlIFNlcnZpY2VMb2NhdG9yIGNvbnRyYWN0IHRvIHJlc29sdmUgYW4gY29udHJhY3QgbmFtZXNwYWNlXG4gICAqIEBwYXJhbSAge3N0cmluZ30gW25hbWVzcGFjZV0gLSBuYW1lc3BhY2UgdG8gcmVzb2x2ZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gQWRkcmVzcyBvZiB0aGUgY29udHJhY3RcbiAgICovXG4gIHJlc29sdmVBZGRyZXNzKG5hbWVzcGFjZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+XG5cbiAgLyoqXG4gICAqIENoZWNrIGEgRVJDNzIxIGNvbnRyYWN0IGZvciBvd25lcnNoaXAgc3RhdHVzXG4gICAqIEBwYXJhbSAge3N0cmluZ30gW293bmVyQWRkcmVzc10gLSBuYW1lc3BhY2UgdG8gcmVzb2x2ZVxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFt0b2tlbklkXSAtIHRva2VuSWQgaW4gdGhlIHJlZ2lzdHJ5IGNvbnRyYWN0XG4gICAqIEBwYXJhbSAge3N0cmluZ30gW3JlZ2lzdHJ5QWRkcmVzc10gLSBhZGRyZXNzIG9mIHRoZSBFUkM3MjEgREFSLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gdHJ1ZSBpZiBwcm92aWRlZCBhZGRyZXNzIGlzIHRoZSBvd25lciBvZiB0aGUgYXNzZXQuXG4gICAqL1xuICBpc093bmVyT2ZDb2xsZWN0aWJsZShvd25lckFkZHJlc3M6IHN0cmluZywgdG9rZW5JZDogc3RyaW5nLCByZWdpc3RyeUFkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj5cblxuICAvKipcbiAgICogRXhlY3V0ZXMgYSBvcmRlciBmcm9tIHRoZSBtYXJrZXRwbGFjZSBjb250cmFjdFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFthc3NldElkXSAtIE5GVCBhc3NldCBpZC5cbiAgICogQHBhcmFtICB7bnVtYmVyfSBbYW1vdW50XSAtIEV4YWN0IGFtb3VudCBvZiB0aGUgb3JkZXIuXG4gICAqIEBwYXJhbSAge3N0cmluZ30gW21hcmtldHBsYWNlQWRkcmVzc10gLSBNYXJrZXRwbGFjZSBjb250cmFjdCBhZGRyZXNzLlxuICAgKi9cbiAgYnV5Q29sbGVjdGlibGUoYXNzZXRJZDogc3RyaW5nLCBhbW91bnQ6IG51bWJlciwgbWFya2V0cGxhY2VBZGRyZXNzOiBzdHJpbmcpOiBQcm9taXNlPGFueT5cblxuICAvKipcbiAgICogUmVxdWlyZXMgYSBnZW5lcmljIHBheW1lbnQgaW4gRVRIIG9yIEVSQzIwLlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFt0b0FkZHJlc3NdIC0gTkZUIGFzc2V0IGlkLlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IFthbW91bnRdIC0gRXhhY3QgYW1vdW50IG9mIHRoZSBvcmRlci5cbiAgICogQHBhcmFtICB7c3RyaW5nfSBbY3VycmVuY3ldIC0gRVRIIG9yIEVSQzIwIHN1cHBvcnRlZCB0b2tlbiBzeW1ib2xcbiAgICovXG4gIHJlcXVpcmVQYXltZW50KHRvQWRkcmVzczogc3RyaW5nLCBhbW91bnQ6IG51bWJlciwgY3VycmVuY3k6IHN0cmluZyk6IFByb21pc2U8YW55PlxuXG4gIC8qKlxuICAgKiBXYWl0cyBmb3IgbWluZWQgdHJhbnNhY3Rpb24uXG4gICAqIEBwYXJhbSAge3N0cmluZ30gW2N1cnJlbmN5XSAtIEN1cnJlbmN5IHVzZWQgZm9yIHBheW1lbnQuXG4gICAqIEBwYXJhbSAge3N0cmluZ30gW3R4SGFzaF0gLSBUcmFuc2FjdGlvbiBoYXNoLlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFtyZWNlaXZpbmdBZGRyZXNzXSAtIEFkZHJlc3Mgb2YgdGhlIHVzZXIgdGhhdCByZWNlaXZlcyB0aGlzIHBheW1lbnQuXG4gICAqIEByZXR1cm4ge2FueX0gLSBQcm9taXNlIG9mIHRoZSB0eCByZWNlcGl0LlxuICAgKi9cbiAgd2FpdEZvck1pbmVkVHgoY3VycmVuY3k6IHN0cmluZywgdHhIYXNoOiBzdHJpbmcsIHJlY2VpdmluZ0FkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8YW55PlxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIGRpY3Rpb25hcnksIGNvbnZlcnRzIGl0IHRvIHN0cmluZyB3aXRoIGNvcnJlY3QgZm9ybWF0IGFuZCBzaWducyBpdC5cbiAgICogQHBhcmFtICB7bWVzc2FnZVRvU2lnbn0gW01lc3NhZ2VEaWN0XSAtIE1lc3NhZ2UgaW4gYW4gb2JqZWN0IGZvcm1hdC5cbiAgICogQHJldHVybiB7b2JqZWN0fSAtIFByb21pc2Ugb2YgbWVzc2FnZSBhbmQgc2lnbmF0dXJlIGluIGFuIG9iamVjdC5cbiAgICovXG4gIHNpZ25NZXNzYWdlKG1lc3NhZ2VEaWN0OiBNZXNzYWdlRGljdCk6IFByb21pc2U8TWVzc2FnZURpY3Q+XG5cbiAgLyoqXG4gICAqIFRha2VzIGEgbWVzc2FnZSBzdHJpbmcsIHBhcnNlcyBpdCBhbmQgY29udmVydHMgdG8gb2JqZWN0LlxuICAgKiBAcGFyYW0gIHttZXNzYWdlfSBbc3RyaW5nXSAtIE1lc3NhZ2UgaW4gYSBzdHJpbmcgZm9ybWF0LlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gUHJvbWlzZSBvZiBtZXNzYWdlIGFzIGEgTWVzc2FnZURpY3QuXG4gICAqL1xuICBjb252ZXJ0TWVzc2FnZVRvT2JqZWN0KG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8TWVzc2FnZURpY3Q+XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gYnVpbGQgYSBFdGhlcmV1bSBwcm92aWRlclxuICAgKi9cbiAgc2VuZEFzeW5jKG1lc3NhZ2U6IFJQQ1NlbmRhYmxlTWVzc2FnZSk6IFByb21pc2U8YW55PlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoYXJhY3RlcnNJZGVudGl0eSB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIFNvdW5kQ29udHJvbGxlciB7XG4gIC8qKlxuICAgKiBBdXRvbWF0aWNhbGx5IHBsYXlzIGEgc291bmQuXG4gICAqIEBwYXJhbSBzcmMgQSBwYXRoIHRvIHRoZSBzb3VuZCBmaWxlIHJlbGF0aXZlIHRvIHRoZSBzY2VuZSBkaXJlY3RvcnlcbiAgICogQHBhcmFtIG9wdGlvbnMgQWRkaXRpb25hbCBvcHRpb25zIHNodWNoIGFzIGB2b2x1bWVgLCBhbmQgYGxvb3BgXG4gICAqL1xuICBwbGF5U291bmQoc3JjOiBzdHJpbmcsIG9wdGlvbnM/OiB7IHZvbHVtZT86IG51bWJlcjsgbG9vcD86IGJvb2xlYW4gfSk6IFByb21pc2U8dm9pZD5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VySWRlbnRpdHkge1xuICAvKipcbiAgICogUmV0dXJuIHRoZSBFdGhlcmV1bSBhZGRyZXNzIG9mIHRoZSB1c2VyXG4gICAqL1xuICBnZXRVc2VyUHVibGljS2V5KCk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD5cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSB1c2VyJ3MgZGF0YVxuICAgKi9cbiAgZ2V0VXNlckRhdGEoKTogUHJvbWlzZTxVc2VyRGF0YSB8IG51bGw+XG59XG4iXX0=